Ian MacDonald Cake Manager RESTful Web Service Phase 2 Submission
=================================================================

1 Requirements Analysis
=======================

The requirement that both the JSON-based RESTful web service and the the human-readable web application can display all cakes and create new cakes implies two underlying functions of the application:
1. Ability to read all cakes from the DB and render in an appropriate format.
2. Ability to add a new cake to the DB.

The comments indicating a preference to move to a more current software stack, and to employ proper client-server separation suggest the implementation of the solution as:
1. An independent web service implemented using RESTful principles deployed at the "/cakes" endpoint.
2. A separate client deployed at an alternative port or endpoint, which consumes the RESTful web service.
3. Implementation using a current and stable framework.  Spring Boot has been chosen for this purpose.

It is also interpreted as given by the requirements that:
1. The underlying H2 in-memory DB should remain in use.
2. The JSON data at the provided web URL is canonical for the initial load of data to the system (https://gist.githubusercontent.com/hart88/198f29ec5114a3ec3460/raw/8dd19a88f9b8d24c23d9960f3300d0c917a4f07c/cake.json).

As a consequence, the system will be built from the bottom up based on Spring Boot Data JPA and Data REST, based on the following functional operations:
public List<Cake> findAll()
public Cake save(Cake cake)

Spring Boot will be used to deliver the underlying webservice in a RESTful architecture such that:
1. All read operations will use the HTTP GET method.
2. All create operations will use the HTTP POST method.
3. HTTP responses use appropriate HTTP response codes to indicate success and failure conditions.
4. HTTP responses from the JSON RESTful service return appropriate content messages in their JSON bodies, including error messages where appropriate.
5. The service follows HATEOAS (Hypertext As The Engine Of Application State) principles.

Point 5 will involve the use of HAL (Hypertext Application Language), which in principle allows agnostic clients to receive information about a navigable API, and discover the functions of a RESTful webservice implementation at request time.

A Web Client application which consumes the above RESTful Web Service will be delivered as a separate project.

The choice of Spring Boot as implementation platform will also facilitate delivery of the Bonus requirements:
1. Testing using Spring Boot Test and Junit (at unit, integration and functional test level).
2. Web client user authentication via Spring Boot support for OAuth2.
3. Continuous Integration via cloud CI will be delivered by integrating the maven build into the cloud CI features on github.
4. Containerisation will be delivered using Docker, by providing a sample image configuration, and integrating its use into the maven build for use in local development and continuous integration.  This will include use of maven to launch a web service container for full functional testing of the RESTful webservice and its web client.

2 Implementation Detail
=======================

2.1 Application
---------------

2.1.1 Java Package scot.ianmacdonald.cakemgr.rest

Class CakeManagerApplication

Provides the execution entry point for the application.
Makes use of the @SpringBootApplication annotation to implement autoconfiguration and component scanning, including scanning and autowiring of Spring Boot components provided as dependencies on the maven pom.xml classpath.

Class LoadDatabase

Uses the @Configuration annotation to notify Spring Boot to scan for @Bean components.  The three beans declared are:
1. An instance of RestTemplate configured with the appropriate media type mappings to convert the application data model between JSON and Java.
2. An instance of List<Cake> representing the initial data set for the application.  This is converted from JSON from the canonical data source using the RestTemplate, and the distinct() method of Stream is used to filter out duplicate Cake instances (relies on the equals() method of Cake).
3. An instance of CommandLineRunner which is executed at startup by the Spring Boot framework, and uses the JpaRepository instance declared in scot.ianmacdonald.cakemgr.rest.model.CakeRepository to save the List<Cake> to the repository as an initial data set.

2.1.2 Java Package scot.ianmacdonald.cakemgr.rest.controller

As noted below in the description of scot.ianmacdonald.cakemgr.rest.model.CakeRepository, the exposure of an unmodified JpaRepository using Spring Boot Data JPA and Data REST means no explicit controller class is needed for the application.

Class CakeManagerErrorAdvice

A configuration class which uses the Spring @ControllerAdvice and @ExceptionHandler annotations to decorate the Spring Boot implemented controllers with explicit exception-handling code.
DataIntegrityViolationException is treated as an HTTP 403 Forbidden error condition related to an attempt to create a Cake with a title that violates the unique integrity constraint on that field in the DB.
HttpMessageNotReadableException is treated as an HTTP 400 Bad Request error condition related to a malformed JSON request.

2.1.3 Java Package scot.ianmacdonald.cakemgr.rest.model

Class Cake

A JPA entity class used to persist information to the H2 DB.
The class uses field-based JPA annotations, which use reflection to access field-level data.  This allows the class to declare only those getter/setter and utility methods which are explicitly needed by business and test code.
Getter methods are provided for the title, description and image fields, which are only used by test code. No accessors are provided for the id field as it is autogenerated and managed by the JPA implementation.
Overridden hashCode() and equals() methods are provided, which are used by the test frameworks.  The equals() method does not make comparison of the JPA-managed id field.
A toString() method is provided, which is used for logging by the LoadDatabase class when initialising the in-memory H2 DB.
A default (package) access no-argument constructor is provided for instantiation by the JPA implementation.  A public constructor is provided for use by test classes.  This does not set the id field, as it is autogenerated and managed by the JPA implementation.
The @JsonAlias Jackson FasterXml annotation is used to map the "desc" field of the canonical JSON data source to the "description" field of the Cake entity.  This is done so class and DB level fields can all be consistently declared with an unabbreviated name format, which is then exposed via the JSON RESTful API.

Class CakeManagerError

A POJO representing the state of a server error message to be returned to a client of the RESTful webservice.

Interface CakeRepository

An extension of Spring JpaRepository.  This acts as a marker interface to allow Spring Boot Data JPA to autowire a repository implementation for Cake entities, and Spring Data Rest to expose it as a RESTful API.
By extending JpaRepository and not specifying any operational methods, a full implementation of JpaRepository is provided by Spring Boot, along with a dispatcher servlet controller which handles all web requests.  By default, this renders all HTTP responses using HAL to implement a HATEOAS-compatible RESTful webservice.
One side effect of this ease of implementation is that the controller layer of the application does not specify an explicit controller class.  This has implications for the testing of the MVC controller layer of the application.
By default, Spring Boot uses the name of the entity class specified in the repository definition (in this case Cake), pluralises it to "cakes" and exposes the RESTful webservice endpoint at "/cakes".

2.1.4 src/main/resources/application.yml

A property of management.endpoints.web.exposure.include with a value of "*" exposes all actuator endpoints for use with Spring Tools Suite runtime tooling.
A property of server.port with value 8081 is provided so that the embedded Tomcat instance is deployed on that port on localhost.

2.1.5 Maven pom.xml

Dependency spring-boot-starter-web causes the application to be launched as a web application in a Tomcat webcontainer.
Dependencies spring-boot-starter-data-jpa and spring-boot-starter-data-rest respectively prompt Spring Boot to provide a JpaRepository implementation at runtime, and then expose it as a RESTful webservice.
Dependency h2 causes the JpaRepository to be implemented using Hibernate and an in-memory H2 DB.
Dependency spring-boot-devtools is included to enable real-time reloading and debugging of webapplications in Spring Tools Suite.
Dependency spring-boot-starter-actuator allows JMX actuator endpoints to be exposed by the web server to enable the use of runtime bean inspection tools in Spring Tools Suite.

2.2 Testing
-----------

The system is tested in slices with unit, integration and functional tests.  Mock testing and stubs are used where appropriate to isolate components for unit testing.

2.2.1 Java Package scot.ianmacdonald.cakemgr.rest

Class CakeManagerApplicationTest

Unit test class which uses @SpringBootTest and @Autowired annotations to load the full application context and test that the CakeRepository and RestTemplate are instantiated, and that CakeRepository is an instance of JpaRepository.

2.2.2 Java Package scot.ianmacdonald.cakemgr.rest.functional

Class CakeManagerFunctionalTest

A full functional end-to-end test of the RESTful web service which requires a new instance of the application to have just been started on localhost port 8081.
This test purposefully avoids use of the @SpringBootTest annotation, so that the test class does not run the application with its full application context loaded in an embedded Tomcat webserver.  This allows the test to remotely test whatever web service is running on localhost:8081.
The class uses the @ExtendWith(SpringExtension.class) annotation in conjunction with @TestPropertySource("classpath:application-test.properties") and @Value("${property.name}") to load test data strings from src/test/resources/application-test.properties.  This was done mainly to declutter the test class and reduce errors caused by the need to escape plaintext characters in Java String objects.
The test uses the @TestMethodOrder(OrderAnnotation.class) and @Order junit annotations to run the test methods in a prescibed order.  This is because when running the test remotely in a fully end-to-end fashion, it is not possible to make the test executions idempotent without repeatedly stopping and restarting Tomcat.  For example, the HATEOS-compatible JSON/HAL responses from the webservice expose Cake id values in their link fields.  These id values are autogenerated by Hibernate, so even requesting delete of all data in a tear down method via the webservice after each test would not be sufficient to make each test method fully idempotent, as the id sequence would continue to increment between tests.
The test uses a RestTemplate to query the webservice, and the JSON responses received are compared to those from the test data suite in application-test.properties.  This allows the webservice to be end-to-end tested in black box mode accessed only via its publicly exposed JSON/HAL interface.

2.2.3 Java Package scot.ianmacdonald.cakemgr.rest.integration

Class CakeManagerIntegrationTest

An integration test which uses @SpringBootTest with @AutoConfigureMockMvc to test the application context.  This configuration prevents an embedded Tomcat instance from being run.
@SpringBootTest loads the entire application context, and @AutoConfigureMockMvc provides a MockMvc instance which is autowired into the test.  The MockMvc instance, an autowired CakeRepository and the MockMvc test framework are used to test findAll() and save() operations of the system, as well as the handling of error conditions (as configured in class CakeManagerErrorAdvice).  The MockMvc framework is used in conjunction with JSON Path matching to test that the HTTP responses in all cases are properly-formed HATEOAS-compliant JSON/HAL response bodies.
A static @BeforeAll method is used with an @Autowired List<Cake> parameter to initialise static test data fields from the application context, so that the data tested comes from the canonical data source.
All test methods which change the state of the H2 DB use the @DirtiesContext(methodMode = MethodMode.AFTER_METHOD) annotation.  This causes the application context to be discarded and reloaded after each such test, which results in class LoadDatabase reinitialising the default data in the H2 DB.  This results in the test methods executing idempotently.
In this test, the H2 DB-backed CakeRepository is acting effectively as both the production DB and a test DB stub, such that the data source for the system does not require to be mocked.

2.2.4 Java Package scot.ianmacdonald.cakemgr.rest.model

Class CakeRepositoryTest

A unit test class which uses the Spring Boot @DataJpaTest annotation to only load the Data JPA layer of the Spring application context for detailed testing of the configuration at the pure Java level.  @DataJpaTest is used to autowire the instance of the CakeRepository for testing.
The annotation @Transactional(propagation = Propagation.NOT_SUPPORTED) is used to execute the tests non-transactionally, so that @BeforeEach and @AfterEach junit annotations can be used to set up and tear down test data explicitly, so that test methods can run idempotently.
The test checks the findAll() and save() operations, as well as checking that a DataIntegrityViolationException is thrown at the Java level when an attempt is made to violate the unique constraint on the title field in the DB.
Again, the H2 DB is acting effectively as both the production DB and a test DB stub, such that the data source for the system does not require to be mocked.

Class CakeTest

A plain junit 5 test which tests the equals() method of class Cake, including appropriate handling of null fields.

2.2.6 Maven pom.xml

Dependency spring-boot-starter-test is included to enable Spring Boot test facilities.  The junit-vintage-engine dependency is excluded to facilitate the use of JUnit 5 (Jupiter) test capabilities over Junit 4.
Unit tests are launched from the build configuration using the maven-surefire-plugin, excluding all functional tests from this phase of the build.
The build configuration uses the spring-boot-maven-plugin with the io.fabric8 docker-maven-plugin to build and start a Docker image of the application in the pre-integration-test phase and then stop it in the post-integration-test phase. In between these phases, in the integration-test phase, the maven-failsafe-plugin runs CakeManagerFunctionalTest. This is the reason that @TestMethodOrder(OrderAnnotation.class) and @Order junit annotations are used to run the tests in a prescribed order, so that they can run in a non-idempotent but predictable fashion without stopping and restarting the Docker image.
The Docker image of the web service application is built to the local Docker repository as docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest to facilitate its push to the GitHub Packages repository in continuous integration.

2.3 Containerisation with Docker
--------------------------------

The file Dockerfile describes a sample Docker configuration which is read by the io.fabric8 docker-maven-plugin build goal and used to create a Docker image of the application, as already described above.

2.4 Cloud Continuous Integration Using Github Actions
-----------------------------------------------------

A github action is configured on the github server in file maven.yml.
The github action is setup to trigger build and then unit, integration and functional test of the rest service application when commits are pushed to master.
Functional testing includes the use of Docker containerisation for end-to-end functional testing by the maven build, as described above.
Success of build and test of the application results in a Docker image of the web service application being pushed to the GitHub Packages repository with the name docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest.  From there it can be accessed by the functional tests of the restclient (Cake Manager Web Client) project.

3 Build, Execute and Exercise the Cake Manager RESTful Web Service
==================================================================

3.1 Requirements

The application is built with Java 8 version 1.8.0_281 using maven 3.6.3.
To run a full build with functional tests requires Docker to be installed and a Docker daemon to be running.  My local development environment used Docker Desktop for Mac version 3.1.0 (51484).

3.2 Build and Test

To build the application and run unit, integration and functional tests:
1. Ensure that the Docker daemon is running.
2. From the root directory of the project execute:
    mvn clean verify
     
These steps will build and test the service locally and build a Docker image to the local Docker repository as docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest

3.3 Execute the Application

To execute using the maven spring-boot plugin, from the root directory execute:
    mvn spring-boot:run
    
To execute the Docker image, after building and testing the application as in step 3.2, with a Docker daemon running, execute:
    docker run -p 8081:8081 docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws
    
Both of these executions will launch the RESTful webservice application in an embedded Tomcat server and make it available at localhost:8081

3.4 Exercise the RESTful Web Service

3.4.1 From a Browser

Accessing http://localhost:8081/cakes will display the initial list of cakes loaded to the system.
By default, Spring Boot exposes a link to the /cakes endpoint and the /profile endpoint at http://localhost:8081
The /profile/cakes endpoint linked from there exposes an ALPS (Application-Level Profile Semantics) metadata description of the service.
The http://localhost:8081/actuator endpoint provides access to the JMX actuator services exposed by the management.endpoints.web.exposure.include="*" property as described above.

3.4.2 From the Command Line

The RESTful service can be exercised from the command line using curl.

To GET the initial list of loaded cakes rendered as JSON/HAL:
    curl -i http://localhost:8081/cakes
    
To POST a new cake to the system and see its JSON/HAL representation returned:
    curl -i -H "Content-Type:application/json" -d '{"title": "Banoffee Pie", "description": "Is it banana or toffee? I dont care... its DEEEELISHUSSSS", "image": "https://www.bakedbyanintrovert.com/wp-content/uploads/2019/02/Banoffee-Pie-Recipe-Image-735x735.jpg"}' http://localhost:8081/cakes

To see the new list of loaded cakes as JSON/HAL, including the new cake:
    curl -i http://localhost:8081/cakes
    
To post the same cake again and see the 403 response with an appropriate JSON error message:
        curl -i -H "Content-Type:application/json" -d '{"title": "Banoffee Pie", "description": "Is it banana or toffee? I dont care... its DEEEELISHUSSSS", "image": "https://www.bakedbyanintrovert.com/wp-content/uploads/2019/02/Banoffee-Pie-Recipe-Image-735x735.jpg"}' http://localhost:8081/cakes
        
To post a malformed JSON POST request and see the 400 response with an appropriate JSON error message:
    curl -i -H "Content-Type:application/json" -d '{"title"; "Banoffee Pie", "description": "Is it banana or toffee? I dont care... its DEEEELISHUSSSS", "image": "https://www.bakedbyanintrovert.com/wp-content/uploads/2019/02/Banoffee-Pie-Recipe-Image-735x735.jpg"}' http://localhost:8081/cakes
    
N.B. the first colon in the final POST request body above is substituted with an invalid semi-colon.
